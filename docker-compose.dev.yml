services:

  ##################################################################
  #  Reverse Proxy and SSL                                         #
  ##################################################################

  traefik:
    image: traefik:v2.11
    command:
      - "--accesslog=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.grpc.address=:5000"
      # - "--log.level=DEBUG"
    ports:
      - "${HTTP_PORT}:80/tcp"
      - "${GRPC_PORT}:5000/tcp"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    expose:
      - '80'
    labels:
      traefik.enable: true
      traefik.http.routers.whoami.rule: Host(`whoami.localhost`)
      traefik.http.routers.whoami.entrypoints: web

  backend:
    extends:
      file: docker-compose.yml
      service: backend
    volumes: 
      - ./backend/src:/backend/src
      - ./web/build:/web/build
      - ./proto:/proto
      - ./types:/types
    entrypoint:
    - npm
    - run
    - start:dev
    labels:
      traefik.enable: true
      traefik.http.routers.backend.rule: Host(`selv.local`)
      traefik.http.routers.backend.entrypoints: web
      traefik.http.routers.backend.service: backend
      traefik.http.services.backend.loadbalancer.server.port: "3000"
      traefik.http.routers.backend-grpc.rule: PathPrefix(`/backend`)
      traefik.http.routers.backend-grpc.middlewares: backend-grpc-stripprefix
      traefik.http.middlewares.backend-grpc-stripprefix.stripprefix.prefixes: /backend
      traefik.http.routers.backend-grpc.entrypoints: grpc
      traefik.http.routers.backend-grpc.service: svc_backend-grpc
      traefik.http.services.svc_backend-grpc.loadbalancer.server.port: "50051"
      traefik.http.services.svc_backend-grpc.loadbalancer.server.scheme: h2c

  identity:
    extends:
      file: docker-compose.yml
      service: identity
    # environment:
    #   - API_ENDPOINT=http://host.docker.internal
    labels:
      traefik.enable: true
      traefik.http.routers.identity-grpc.rule: PathPrefix(`/identity`)
      traefik.http.routers.identity-grpc.middlewares: identity-grpc-stripprefix
      traefik.http.middlewares.identity-grpc-stripprefix.stripprefix.prefixes: /identity
      traefik.http.routers.identity-grpc.entrypoints: grpc
      traefik.http.routers.identity-grpc.service: svc_identity-grpc
      traefik.http.services.svc_identity-grpc.loadbalancer.server.port: "50051"
      traefik.http.services.svc_identity-grpc.loadbalancer.server.scheme: h2c

  oid4vc-tanglelabs:
    extends:
      file: docker-compose.yml
      service: oid4vc-tanglelabs
    labels:
      traefik.enable: true
      traefik.http.routers.oid4vc-tanglelabs.rule: Host(`bank.selv.local`)
      traefik.http.routers.oid4vc-tanglelabs.entrypoints: web
      traefik.http.routers.oid4vc-tanglelabs.service: oid4vc-tanglelabs
      traefik.http.services.oid4vc-tanglelabs.loadbalancer.server.port: "3333"
      traefik.http.routers.oid4vc-tanglelabs-grpc.rule: PathPrefix(`/oid4vc-tanglelabs`)
      traefik.http.routers.oid4vc-tanglelabs-grpc.middlewares: oid4vc-tanglelabs-grpc-stripprefix
      traefik.http.middlewares.oid4vc-tanglelabs-grpc-stripprefix.stripprefix.prefixes: /oid4vc-tanglelabs
      traefik.http.routers.oid4vc-tanglelabs-grpc.entrypoints: grpc
      traefik.http.routers.oid4vc-tanglelabs-grpc.service: svc_oid4vc-tanglelabs-grpc
      traefik.http.services.svc_oid4vc-tanglelabs-grpc.loadbalancer.server.port: "50051"
      traefik.http.services.svc_oid4vc-tanglelabs-grpc.loadbalancer.server.scheme: h2c

  # oid4vc-waltid:
  #   extends:
  #     file: docker-compose.yml
  #     service: oid4vc-waltid
  #   labels:
  #     traefik.enable: true
  #     traefik.http.routers.oid4vc-waltid.rule: Host(`government.selv.local`)
  #     traefik.http.routers.oid4vc-waltid.entrypoints: web
  #     traefik.http.routers.oid4vc-waltid.service: oid4vc-waltid
  #     traefik.http.services.oid4vc-waltid.loadbalancer.server.port: "3000"
  #     traefik.http.routers.oid4vc-waltid-grpc.rule: PathPrefix(`/oid4vc-waltid`)
  #     traefik.http.routers.oid4vc-waltid-grpc.middlewares: oid4vc-waltid-grpc-stripprefix
  #     traefik.http.middlewares.oid4vc-waltid-grpc-stripprefix.stripprefix.prefixes: /oid4vc-waltid
  #     traefik.http.routers.oid4vc-waltid-grpc.entrypoints: grpc
  #     traefik.http.routers.oid4vc-waltid-grpc.service: svc_oid4vc-waltid-grpc
  #     traefik.http.services.svc_oid4vc-waltid-grpc.loadbalancer.server.port: "50051"
  #     traefik.http.services.svc_oid4vc-waltid-grpc.loadbalancer.server.scheme: h2c

  oid4vc-impierce:
    extends:
      file: docker-compose.yml
      service: oid4vc-impierce
    labels:
      traefik.enable: true
      traefik.http.routers.oid4vc-impierce.rule: Host(`insurance.selv.local`)
      traefik.http.routers.oid4vc-impierce.entrypoints: web
      traefik.http.routers.oid4vc-impierce.service: oid4vc-impierce
      traefik.http.services.oid4vc-impierce.loadbalancer.server.port: "3033"
      traefik.http.routers.oid4vc-impierce-grpc.rule: PathPrefix(`/oid4vc-impierce`)
      traefik.http.routers.oid4vc-impierce-grpc.middlewares: oid4vc-impierce-grpc-stripprefix
      traefik.http.middlewares.oid4vc-impierce-grpc-stripprefix.stripprefix.prefixes: /oid4vc-impierce
      traefik.http.routers.oid4vc-impierce-grpc.entrypoints: grpc
      traefik.http.routers.oid4vc-impierce-grpc.service: svc_oid4vc-impierce-grpc
      traefik.http.services.svc_oid4vc-impierce-grpc.loadbalancer.server.port: "50051"
      traefik.http.services.svc_oid4vc-impierce-grpc.loadbalancer.server.scheme: h2c

  grpcurl:
    image: fullstorydev/grpcurl:latest
    volumes:
    - ./proto:/proto

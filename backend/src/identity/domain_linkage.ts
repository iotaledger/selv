// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v3.12.4
// source: identity/domain_linkage.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "domain_linkage";

export interface ValidateDidResponse {
  did: string;
  domains: ValidateDidResponse_Domains | undefined;
}

export interface ValidateDidResponse_Domains {
  valid: ValidateDidResponse_Domains_ValidDomain[];
  invalid: ValidateDidResponse_Domains_InvalidDomain[];
}

export interface ValidateDidResponse_Domains_ValidDomain {
  url: string;
  credential: string;
  serviceId: string;
}

export interface ValidateDidResponse_Domains_InvalidDomain {
  url: string;
  credential?: string | undefined;
  serviceId: string;
  error: string;
}

export interface ValidateDomainResponse {
  domain: string;
  linkedDids: ValidateDomainResponse_LinkedDids | undefined;
}

export interface ValidateDomainResponse_LinkedDids {
  valid: ValidateDomainResponse_LinkedDids_ValidDid[];
  invalid: ValidateDomainResponse_LinkedDids_InvalidDid[];
}

export interface ValidateDomainResponse_LinkedDids_ValidDid {
  did: string;
  credential: string;
  serviceId: string;
}

export interface ValidateDomainResponse_LinkedDids_InvalidDid {
  did?: string | undefined;
  credential?: string | undefined;
  serviceId?: string | undefined;
  error: string;
}

export interface ValidateDomainRequest {
  /** domain to validate */
  domain: string;
}

export interface ValidateDomainAgainstDidConfigurationRequest {
  /** domain to validate */
  domain: string;
  /** already resolved domain linkage config */
  didConfiguration: string;
}

export interface ValidateDidRequest {
  /** DID to validate */
  did: string;
}

export interface ValidateDidAgainstDidConfigurationsRequest {
  /** DID to validate */
  did: string;
  /** already resolved domain linkage configs */
  didConfigurations: ValidateDomainAgainstDidConfigurationRequest[];
}

export const DOMAIN_LINKAGE_PACKAGE_NAME = "domain_linkage";

export interface DomainLinkageClient {
  validateDomain(request: ValidateDomainRequest): Observable<ValidateDomainResponse>;

  validateDomainAgainstDidConfiguration(
    request: ValidateDomainAgainstDidConfigurationRequest,
  ): Observable<ValidateDomainResponse>;

  validateDid(request: ValidateDidRequest): Observable<ValidateDidResponse>;

  validateDidAgainstDidConfigurations(
    request: ValidateDidAgainstDidConfigurationsRequest,
  ): Observable<ValidateDidResponse>;
}

export interface DomainLinkageController {
  validateDomain(
    request: ValidateDomainRequest,
  ): Promise<ValidateDomainResponse> | Observable<ValidateDomainResponse> | ValidateDomainResponse;

  validateDomainAgainstDidConfiguration(
    request: ValidateDomainAgainstDidConfigurationRequest,
  ): Promise<ValidateDomainResponse> | Observable<ValidateDomainResponse> | ValidateDomainResponse;

  validateDid(
    request: ValidateDidRequest,
  ): Promise<ValidateDidResponse> | Observable<ValidateDidResponse> | ValidateDidResponse;

  validateDidAgainstDidConfigurations(
    request: ValidateDidAgainstDidConfigurationsRequest,
  ): Promise<ValidateDidResponse> | Observable<ValidateDidResponse> | ValidateDidResponse;
}

export function DomainLinkageControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "validateDomain",
      "validateDomainAgainstDidConfiguration",
      "validateDid",
      "validateDidAgainstDidConfigurations",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DomainLinkage", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DomainLinkage", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DOMAIN_LINKAGE_SERVICE_NAME = "DomainLinkage";

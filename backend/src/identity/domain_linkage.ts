// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v3.12.4
// source: identity/domain_linkage.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "domain_linkage";

export interface ValidateDomainRequest {
  /** domain to validate */
  domain: string;
}

export interface ValidateDomainAgainstDidConfigurationRequest {
  /** domain to validate */
  domain: string;
  /** already resolved domain linkage config */
  didConfiguration: string;
}

export interface LinkedDidValidationStatus {
  /** validation succeeded or not, `error` property is added for `false` cases */
  valid: boolean;
  /** credential from `linked_dids` as compact JWT domain linkage credential if it could be retrieved */
  document?:
    | string
    | undefined;
  /** an error message, that occurred when validated, omitted if valid */
  error?: string | undefined;
}

export interface ValidateDomainResponse {
  /** list of JWT domain linkage credential, uses the same order as the `did-configuration.json` file for domain */
  linkedDids: LinkedDidValidationStatus[];
}

export interface LinkedDidEndpointValidationStatus {
  /** id of service endpoint entry */
  id: string;
  /** list of JWT domain linkage credential, uses the same order as the `did-configuration.json` file for domain */
  serviceEndpoint: LinkedDidValidationStatus[];
}

export interface ValidateDidRequest {
  /** DID to validate */
  did: string;
}

export interface ValidateDidAgainstDidConfigurationsRequest {
  /** DID to validate */
  did: string;
  /** already resolved domain linkage configs */
  didConfigurations: ValidateDomainAgainstDidConfigurationRequest[];
}

export interface ValidateDidResponse {
  /** mapping of service entries from DID with validation status for endpoint URLs */
  service: LinkedDidEndpointValidationStatus[];
}

export const DOMAIN_LINKAGE_PACKAGE_NAME = "domain_linkage";

export interface DomainLinkageClient {
  validateDomain(request: ValidateDomainRequest): Observable<ValidateDomainResponse>;

  validateDomainAgainstDidConfiguration(
    request: ValidateDomainAgainstDidConfigurationRequest,
  ): Observable<ValidateDomainResponse>;

  validateDid(request: ValidateDidRequest): Observable<ValidateDidResponse>;

  validateDidAgainstDidConfigurations(
    request: ValidateDidAgainstDidConfigurationsRequest,
  ): Observable<ValidateDidResponse>;
}

export interface DomainLinkageController {
  validateDomain(
    request: ValidateDomainRequest,
  ): Promise<ValidateDomainResponse> | Observable<ValidateDomainResponse> | ValidateDomainResponse;

  validateDomainAgainstDidConfiguration(
    request: ValidateDomainAgainstDidConfigurationRequest,
  ): Promise<ValidateDomainResponse> | Observable<ValidateDomainResponse> | ValidateDomainResponse;

  validateDid(
    request: ValidateDidRequest,
  ): Promise<ValidateDidResponse> | Observable<ValidateDidResponse> | ValidateDidResponse;

  validateDidAgainstDidConfigurations(
    request: ValidateDidAgainstDidConfigurationsRequest,
  ): Promise<ValidateDidResponse> | Observable<ValidateDidResponse> | ValidateDidResponse;
}

export function DomainLinkageControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "validateDomain",
      "validateDomainAgainstDidConfiguration",
      "validateDid",
      "validateDidAgainstDidConfigurations",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DomainLinkage", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DomainLinkage", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DOMAIN_LINKAGE_SERVICE_NAME = "DomainLinkage";

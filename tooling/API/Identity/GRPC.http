proto < ../../../shared/proto/identity/credentials.proto
proto < ../../../shared/proto/identity/utils.proto
proto < ../../../shared/proto/identity/presentation.proto
proto < ../../../shared/proto/identity/domain_linkage.proto

@host=http://selv.local:5001/identity
###
{{
    const utils = require('../scripting/dist/bundle5.js');

    const credential_json = async () => {

        const { didDocument, keyPairs } = await utils.getDIDKey();
        const { id: did, authentication } = didDocument; 

        const issuer = "did:iota:rms:0xc57ab41995853d08d3f310aaf939048d25ba3d804bba636a2ecacee95b16c268";
        const credential = {
            "@context":[
                "https://www.w3.org/2018/credentials/v1",
                "https://www.w3.org/2018/credentials/examples/v1",
            ],
            type: ["VerifiableCredential","UniversityDegreeCredential"],
            issuanceDate:"2017-10-22T12:23:48Z",
            issuer,
            credentialSubject:{
                id: did,
                degree:{
                    type:"BachelorDegree",
                    name:"Bachelor of Science and Arts",
                }
            },
        }

        const credentialJson = JSON.stringify(JSON.stringify(credential));
        console.log(credentialJson);
        return credentialJson;
    }
    exports.credential_json = credential_json();
}}

GRPC /Jwt/create
{
    "credentialJson": {{credential_json}},
    "issuerFragment": "NMu3IKkVVMCiBwEpeWq9-mzmJbtS-vS9QDJ1v0pGbqw"
}
###

{{
    //pre request script
    exports.data = new TextEncoder().encode("test");
}}

GRPC /Signing/sign
{
    "data": {{data}},
    "keyId": "pK0JAYw5RFFKqorBn0x4w98zl2UBfRys"
}
###

{{
    //pre request script
    exports.data = new TextEncoder().encode("test");
}}

GRPC /DomainLinkage/validate_did
{
    "did": "did:iota:rms:0xb97ebcab3c70d9d3087a96e04aac43c8a139a187a1a7cbaae1a17bc2d7eb0766"
}
###
{{
    const utils = require('../scripting/dist/bundle5.js');

    const jwt = async () => {

        const { didDocument, keyPairs } = await utils.getDIDKey();
        const { id:did, authentication } = didDocument; 

        const header = {
            kid: `${authentication}`,
            alg: "EdDSA",
            typ: "JWT"
        }

        const encodedHeaders = Buffer.from(JSON.stringify(header), "utf8").toString("base64url");

        const claims = {
            "iss": did,
            "jti": "urn:uuid:3978344f-8596-4c3a-a978-8fcaba3903c5",
            "aud": "did:example:4a57546973436f6f6c4a4a57573",
            "nbf": Math.floor(Date.now() / 1000),
            "iat": Math.floor(Date.now() / 1000),
            "exp": Math.floor((Date.now() + 10 * (60 * 1000)) / 1000),
            "nonce": "343s$FSFDa-",
            "vp": {
                "@context": [
                    "https://www.w3.org/2018/credentials/v1",
                    "https://www.w3.org/2018/credentials/examples/v1"
                ],
                "type": [
                    "VerifiablePresentation",
                    "CredentialManagerPresentation"
                ],
                "verifiableCredential": [
                    "eyJraWQiOiJkaWQ6aW90YTpybXM6MHgzZmJjNjVmMzg5ZTk2ZjI3MjZiOGY5YjZmNjNmNGUyZTYyYTc4YzQyMzhhMzgxYWUyNWJiOWQ3OGNmNDhjNGE1I0RmQnhlTTZrdnpvczc2VUlQWl9zNUhUQUJfNEM4bE5MRlZ3QlItczJtX1kiLCJ0eXAiOiJKV1QiLCJhbGciOiJFZERTQSJ9.eyJpc3MiOiJkaWQ6aW90YTpybXM6MHgzZmJjNjVmMzg5ZTk2ZjI3MjZiOGY5YjZmNjNmNGUyZTYyYTc4YzQyMzhhMzgxYWUyNWJiOWQ3OGNmNDhjNGE1IiwibmJmIjoxNTA4Njc1MDI4LCJzdWIiOiJkaWQ6andrOmV5SmhiR2NpT2lKRlpFUlRRU0lzSW1OeWRpSTZJa1ZrTWpVMU1Ua2lMQ0pyYVdRaU9pSmhjbmh6VEc1T1NXaEpZa1Z6WkdsQlpYVjROMlJ4YnpKaE0yTjZTRWRFWDJoU01VWllNV1U0UmpsQklpd2lhM1I1SWpvaVQwdFFJaXdpZUNJNklrbFliMDFUYkhSUk9UUnJWamRxYWtGa2VrVmZOSFZHU1dreU1DMXRhekpWV0hSeGVqbEljSGRSVWtraWZRIiwidmMiOnsiQGNvbnRleHQiOlsiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy9leGFtcGxlcy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiVW5pdmVyc2l0eURlZ3JlZUNyZWRlbnRpYWwiXSwiY3JlZGVudGlhbFN1YmplY3QiOnsiZGVncmVlIjp7Im5hbWUiOiJCYWNoZWxvciBvZiBTY2llbmNlIGFuZCBBcnRzIiwidHlwZSI6IkJhY2hlbG9yRGVncmVlIn19fX0.ljpZsaxd4JBap0y8ImaW6aOn_PRGfpckL2MIWKUMEuzGM2oX9MwmN10bMNU6szxLxcsAE3Gu37COwhiE8nvPBg"
                ]
            }
        }

        const encodedPayload = Buffer.from(JSON.stringify(claims), "utf8").toString("base64url");

        const encodedSignature = await utils.sign(`${encodedHeaders}.${encodedPayload}`)

        const jwt = `${encodedHeaders}.${encodedPayload}.${encodedSignature}`;
        return jwt;
    }
    exports.jwt = jwt();
}}

GRPC /CredentialPresentation/validate
{
    "jwt": "{{jwt}}"
}
###
GRPC /CredentialPresentation/validate
{
    "jwt": "eyJ0eXAiOiJKV1QiLCJhbGciOiJFZERTQSIsImtpZCI6ImRpZDpqd2s6ZXlKaGJHY2lPaUpGWkVSVFFTSXNJbU55ZGlJNklrVmtNalUxTVRraUxDSnJhV1FpT2lKeWNIcEZNVWhyVW1aaVpYUldaRmQ1WW1wRFRFRkpMVlJxY2pWclRsVmpNRk5GZVdsaWVFRlNUamxySWl3aWEzUjVJam9pVDB0UUlpd2llQ0k2SW5wSGRGTnVWWHBwZFdoWFZWTjJNVGhqUVZWemRrNWlVWGR4WjBsNWQyaE9ZMnBVUW5oblNITnpTVWtpZlEjMCJ9.eyJpc3MiOiJkaWQ6andrOmV5SmhiR2NpT2lKRlpFUlRRU0lzSW1OeWRpSTZJa1ZrTWpVMU1Ua2lMQ0pyYVdRaU9pSnljSHBGTVVoclVtWmlaWFJXWkZkNVltcERURUZKTFZScWNqVnJUbFZqTUZORmVXbGllRUZTVGpscklpd2lhM1I1SWpvaVQwdFFJaXdpZUNJNklucEhkRk51VlhwcGRXaFhWVk4yTVRoalFWVnpkazVpVVhkeFowbDVkMmhPWTJwVVFuaG5TSE56U1VraWZRIiwic3ViIjoiZGlkOmp3azpleUpoYkdjaU9pSkZaRVJUUVNJc0ltTnlkaUk2SWtWa01qVTFNVGtpTENKcmFXUWlPaUp5Y0hwRk1VaHJVbVppWlhSV1pGZDVZbXBEVEVGSkxWUnFjalZyVGxWak1GTkZlV2xpZUVGU1RqbHJJaXdpYTNSNUlqb2lUMHRRSWl3aWVDSTZJbnBIZEZOdVZYcHBkV2hYVlZOMk1UaGpRVlZ6ZGs1aVVYZHhaMGw1ZDJoT1kycFVRbmhuU0hOelNVa2lmUSIsImF1ZCI6ImRpZDppb3RhOnJtczoweGI5N2ViY2FiM2M3MGQ5ZDMwODdhOTZlMDRhYWM0M2M4YTEzOWExODdhMWE3Y2JhYWUxYTE3YmMyZDdlYjA3NjYiLCJleHAiOjE3MjE5MTEwMTEsImlhdCI6MTcyMTkxMDQxMSwidnAiOnsiQGNvbnRleHQiOiJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsInR5cGUiOiJWZXJpZmlhYmxlUHJlc2VudGF0aW9uIiwidmVyaWZpYWJsZUNyZWRlbnRpYWwiOlsiZXlKcmFXUWlPaUprYVdRNmFXOTBZVHB5YlhNNk1IaGtZakpoTW1Jek9UazBZemRoTnpsaU56bGlZV1JpWkRCallqVmtORFZsTjJVNE4yTmlZVEV3WldNMU1qazNNR0U1TXpZMU5tTTJZakEzTURCaU9UazJJMDl6ZDJKSlRsSk5NSEZMUkV4b1JIWXdkSFZHYkV0R2JVaDJVbU5hT0U5cExYQnNOVWR6VGtzMlJUQWlMQ0owZVhBaU9pSktWMVFpTENKaGJHY2lPaUpGWkVSVFFTSjkuZXlKcGMzTWlPaUprYVdRNmFXOTBZVHB5YlhNNk1IaGtZakpoTW1Jek9UazBZemRoTnpsaU56bGlZV1JpWkRCallqVmtORFZsTjJVNE4yTmlZVEV3WldNMU1qazNNR0U1TXpZMU5tTTJZakEzTURCaU9UazJJaXdpYm1KbUlqb3hOekl4T1RBNE5ERTJMQ0p6ZFdJaU9pSmthV1E2YTJWNU9ubzJUV3QwUkVVNFpVVlNhbmhpT0UxdWIzSm1OVU5qV1hKcVNuRk9Va3BxZUZwTlZqZzVXREoyTmtwWldHVk1NU0lzSW5aaklqcDdJa0JqYjI1MFpYaDBJanBiSW1oMGRIQnpPaTh2ZDNkM0xuY3pMbTl5Wnk4eU1ERTRMMk55WldSbGJuUnBZV3h6TDNZeElpd2lhSFIwY0hNNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TVRndlkzSmxaR1Z1ZEdsaGJITXZaWGhoYlhCc1pYTXZkakVpWFN3aWRIbHdaU0k2V3lKV1pYSnBabWxoWW14bFEzSmxaR1Z1ZEdsaGJDSXNJa05wZEdsNlpXNURjbVZrWlc1MGFXRnNJbDBzSW1OeVpXUmxiblJwWVd4VGRXSnFaV04wSWpwN0ltSnBjblJvY0d4aFkyVWlPaUpOZFhOMFpYSnpkR0ZrZENJc0ltTnZkVzUwY25raU9pSkhaWEp0WVc1NUlpd2laR0YwWlNJNklqRTVOell0TVRJdE1UVlVNRFk2TVRrNk5Ua3VOVFV5V2lJc0ltWnBjbk4wVG1GdFpTSTZJa0psYmlJc0lteGhjM1JPWVcxbElqb2lWWFI2WlhJaUxDSnVZWFJwYjI1aGJHbDBlU0k2SW1kbGNtMWhiaUlzSW5Cb2IyNWxJam9pTURBdE1EQXdNQ0o5ZlgwLlpfRnBfMTVlT0R6OXVtWFJkTlNsWVhvTUtpTm1fdjBFWUN3VmZKMG1GckdnT2ZIaWJIV0FrUWUyQnAwdUZ0bDRVNHgwNWYxZkZ4STFFZnI1VWcwUEN3Il0sImhvbGRlciI6ImRpZDprZXk6ejZNa3RERThlRVJqeGI4TW5vcmY1Q2NZcmpKcU5SSmp4Wk1WODlYMnY2SllYZUwxIn0sIm5vbmNlIjoidGVzdCJ9.lQhVLvQ7eeoAHrwQ6MIitU6x4wEv7EqnxI0Jd30xrqZ0wZAQ-JmpZ6fag9g8SKHx3x3RMEKBrgqvpMVhDPcmDQ"
}
###

{{
    //pre request script
    exports.data = new TextEncoder().encode("test");
}}

GRPC /DidJwk/resolve
{
    "did": "did:jwk:eyJhbGciOiJFZERTQSIsImNydiI6IkVkMjU1MTkiLCJraWQiOiJycHpFMUhrUmZiZXRWZFd5YmpDTEFJLVRqcjVrTlVjMFNFeWlieEFSTjlrIiwia3R5IjoiT0tQIiwieCI6InpHdFNuVXppdWhXVVN2MThjQVVzdk5iUXdxZ0l5d2hOY2pUQnhnSHNzSUkifQ"
}
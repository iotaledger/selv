proto < ../../../shared/proto/identity/credentials.proto
proto < ../../../shared/proto/identity/utils.proto
proto < ../../../shared/proto/identity/presentation.proto

@host=http://selv.local:5001/identity
###
{{
    const utils = require('../scripting/dist/bundle5.js');

    const credential_json = async () => {

        const { didDocument, keyPairs } = await utils.getDIDKey();
        const { id: did, authentication } = didDocument; 

        const issuer = "did:iota:rms:0xc57ab41995853d08d3f310aaf939048d25ba3d804bba636a2ecacee95b16c268";
        const credential = {
            "@context":[
                "https://www.w3.org/2018/credentials/v1",
                "https://www.w3.org/2018/credentials/examples/v1",
            ],
            type: ["VerifiableCredential","UniversityDegreeCredential"],
            issuanceDate:"2017-10-22T12:23:48Z",
            issuer,
            credentialSubject:{
                id: did,
                degree:{
                    type:"BachelorDegree",
                    name:"Bachelor of Science and Arts",
                }
            },
        }

        const credentialJson = JSON.stringify(JSON.stringify(credential));
        console.log(credentialJson);
        return credentialJson;
    }
    exports.credential_json = credential_json();
}}

GRPC /Jwt/create
{
    "credentialJson": {{credential_json}},
    "issuerFragment": "NMu3IKkVVMCiBwEpeWq9-mzmJbtS-vS9QDJ1v0pGbqw"
}
###

{{
    //pre request script
    exports.data = new TextEncoder().encode("test");
}}

GRPC /Signing/sign
{
    "data": {{data}},
    "keyId": "pK0JAYw5RFFKqorBn0x4w98zl2UBfRys"
}
###
{{
    const utils = require('../scripting/dist/bundle5.js');

    const jwt = async () => {

        const { didDocument, keyPairs } = await utils.getDIDKey();
        const { id:did, authentication } = didDocument; 

        const header = {
            kid: `${authentication}`,
            alg: "EdDSA",
            typ: "JWT"
        }

        const encodedHeaders = Buffer.from(JSON.stringify(header), "utf8").toString("base64url");

        const claims = {
            "iss": did,
            "jti": "urn:uuid:3978344f-8596-4c3a-a978-8fcaba3903c5",
            "aud": "did:example:4a57546973436f6f6c4a4a57573",
            "nbf": Math.floor(Date.now() / 1000),
            "iat": Math.floor(Date.now() / 1000),
            "exp": Math.floor((Date.now() + 2 * (60 * 60 * 1000)) / 1000),
            "nonce": "343s$FSFDa-",
            "vp": {
                "@context": [
                    "https://www.w3.org/2018/credentials/v1",
                    "https://www.w3.org/2018/credentials/examples/v1"
                ],
                "type": [
                    "VerifiablePresentation",
                    "CredentialManagerPresentation"
                ],
                "verifiableCredential": [
                    "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpZDpleGFtcGxlOmFiZmUxM2Y3MTIxMjA0MzFjMjc2ZTEyZWNhYiNrZXlzLTEifQ.eyJzdWIiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxYzI3NmUxMmVjMjEiLCJqdGkiOiJodHRwOi8vZXhhbXBsZS5lZHUvY3JlZGVudGlhbHMvMzczMiIsImlzcyI6Imh0dHBzOi8vZXhhbXBsZS5jb20va2V5cy9mb28uandrIiwibmJmIjoxNTQxNDkzNzI0LCJpYXQiOjE1NDE0OTM3MjQsImV4cCI6MTU3MzAyOTcyMywibm9uY2UiOiI2NjAhNjM0NUZTZXIiLCJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZUNyZWRlbnRpYWwiLCJVbml2ZXJzaXR5RGVncmVlQ3JlZGVudGlhbCJdLCJjcmVkZW50aWFsU3ViamVjdCI6eyJkZWdyZWUiOnsidHlwZSI6IkJhY2hlbG9yRGVncmVlIiwibmFtZSI6IjxzcGFuIGxhbmc9J2ZyLUNBJz5CYWNjYWxhdXLDqWF0IGVuIG11c2lxdWVzIG51bcOpcmlxdWVzPC9zcGFuPiJ9fX19.KLJo5GAyBND3LDTn9H7FQokEsUEi8jKwXhGvoN3JtRa51xrNDgXDb0cq1UTYB-rK4Ft9YVmR1NI_ZOF8oGc_7wAp8PHbF2HaWodQIoOBxxT-4WNqAxft7ET6lkH-4S6Ux3rSGAmczMohEEf8eCeN-jC8WekdPl6zKZQj0YPB1rx6X0-xlFBs7cl6Wt8rfBP_tZ9YgVWrQmUWypSioc0MUyiphmyEbLZagTyPlUyflGlEdqrZAv6eSe6RtxJy6M1-lD7a5HTzanYTWBPAUHDZGyGKXdJw-W_x0IWChBzI8t3kpG253fg6V3tPgHeKXE94fz_QpYfg--7kLsyBAfQGbg"
                ]
            }
        }

        const encodedPayload = Buffer.from(JSON.stringify(claims), "utf8").toString("base64url");

        const encodedSignature = await utils.sign(`${encodedHeaders}.${encodedPayload}`)

        const jwt = `${encodedHeaders}.${encodedPayload}.${encodedSignature}`;
        return jwt;
    }
    exports.jwt = jwt();
}}

GRPC /CredentialPresentation/validate
{
    "jwt": {{jwt}}
}